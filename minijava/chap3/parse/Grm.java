
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Feb 21 15:27:34 EST 2013
//----------------------------------------------------

package parse;


/** CUP v0.10k generated parser.
  * @version Thu Feb 21 15:27:34 EST 2013
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\003\004\000\002\004" +
    "\023\000\002\005\011\000\002\005\002\000\002\007\004" +
    "\000\002\007\002\000\002\006\005\000\002\011\004\000" +
    "\002\011\002\000\002\010\017\000\002\012\005\000\002" +
    "\012\002\000\002\013\006\000\002\013\002\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\016\004\000\002\016\002\000\002\015\005\000" +
    "\002\015\011\000\002\015\007\000\002\015\007\000\002" +
    "\015\006\000\002\015\011\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\006\000\002\017\005\000\002\017\010\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\007\000\002\017" +
    "\006\000\002\017\004\000\002\017\005\000\002\020\004" +
    "\000\002\020\002\000\002\021\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\006\006\001\002\000\004\002\207\001" +
    "\002\000\006\002\ufffd\006\ufffd\001\002\000\004\004\007" +
    "\001\002\000\004\030\010\001\002\000\004\007\011\001" +
    "\002\000\004\010\012\001\002\000\004\011\013\001\002" +
    "\000\004\012\014\001\002\000\004\032\015\001\002\000" +
    "\004\013\016\001\002\000\004\034\017\001\002\000\004" +
    "\035\020\001\002\000\004\004\021\001\002\000\004\033" +
    "\022\001\002\000\004\030\023\001\002\000\014\004\024" +
    "\017\030\021\027\022\031\030\025\001\002\000\006\034" +
    "\130\040\131\001\002\000\016\004\024\017\030\021\027" +
    "\022\031\030\025\031\uffed\001\002\000\004\031\122\001" +
    "\002\000\004\032\116\001\002\000\004\032\110\001\002" +
    "\000\004\032\032\001\002\000\022\004\037\005\043\024" +
    "\034\025\036\026\041\027\033\032\042\047\040\001\002" +
    "\000\006\004\101\015\102\001\002\000\030\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\001\002\000\022\033\077\034" +
    "\051\041\047\042\045\043\050\044\052\045\053\046\054" +
    "\001\002\000\030\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\001\002\000\030\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\001\002\000\022\004\037\005\043\024\034\025\036\026" +
    "\041\027\033\032\042\047\040\001\002\000\030\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\001\002\000\022\004\037" +
    "\005\043\024\034\025\036\026\041\027\033\032\042\047" +
    "\040\001\002\000\030\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\001\002\000\022\033\046\034\051\041\047\042\045" +
    "\043\050\044\052\045\053\046\054\001\002\000\022\004" +
    "\037\005\043\024\034\025\036\026\041\027\033\032\042" +
    "\047\040\001\002\000\030\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\001\002\000\022\004\037\005\043\024\034\025" +
    "\036\026\041\027\033\032\042\047\040\001\002\000\022" +
    "\004\037\005\043\024\034\025\036\026\041\027\033\032" +
    "\042\047\040\001\002\000\022\004\037\005\043\024\034" +
    "\025\036\026\041\027\033\032\042\047\040\001\002\000" +
    "\022\004\037\005\043\024\034\025\036\026\041\027\033" +
    "\032\042\047\040\001\002\000\022\004\037\005\043\024" +
    "\034\025\036\026\041\027\033\032\042\047\040\001\002" +
    "\000\006\004\055\023\056\001\002\000\004\032\057\001" +
    "\002\000\030\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\001" +
    "\002\000\024\004\037\005\043\024\034\025\036\026\041" +
    "\027\033\032\042\033\uffd4\047\040\001\002\000\024\033" +
    "\uffd2\034\051\037\064\041\047\042\045\043\050\044\052" +
    "\045\053\046\054\001\002\000\004\033\062\001\002\000" +
    "\030\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002\000" +
    "\004\033\uffd5\001\002\000\022\004\037\005\043\024\034" +
    "\025\036\026\041\027\033\032\042\047\040\001\002\000" +
    "\024\033\uffd2\034\051\037\064\041\047\042\045\043\050" +
    "\044\052\045\053\046\054\001\002\000\004\033\uffd3\001" +
    "\002\000\030\033\uffe4\034\051\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\054\001" +
    "\002\000\030\033\uffe5\034\051\035\uffe5\036\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\053\046\054\001" +
    "\002\000\022\034\051\035\072\041\047\042\045\043\050" +
    "\044\052\045\053\046\054\001\002\000\030\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\001\002\000\030\033\uffe6\034" +
    "\051\035\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\053\046\054\001\002\000\030\033\uffe3\034" +
    "\051\035\uffe3\036\uffe3\037\uffe3\041\uffe3\042\045\043\050" +
    "\044\052\045\053\046\054\001\002\000\030\033\uffe2\034" +
    "\051\035\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043\050" +
    "\044\052\045\053\046\054\001\002\000\030\033\uffd7\034" +
    "\051\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\054\001\002\000\004\036\100\001" +
    "\002\000\022\004\uffe9\014\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\030\uffe9\031\uffe9\001\002\000\004\032\106\001" +
    "\002\000\004\034\103\001\002\000\022\004\037\005\043" +
    "\024\034\025\036\026\041\027\033\032\042\047\040\001" +
    "\002\000\022\034\051\035\105\041\047\042\045\043\050" +
    "\044\052\045\053\046\054\001\002\000\030\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\001\002\000\004\033\107\001" +
    "\002\000\030\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001" +
    "\002\000\022\004\037\005\043\024\034\025\036\026\041" +
    "\027\033\032\042\047\040\001\002\000\022\033\112\034" +
    "\051\041\047\042\045\043\050\044\052\045\053\046\054" +
    "\001\002\000\014\004\024\017\030\021\027\022\031\030" +
    "\025\001\002\000\004\020\114\001\002\000\014\004\024" +
    "\017\030\021\027\022\031\030\025\001\002\000\022\004" +
    "\uffeb\014\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\030\uffeb" +
    "\031\uffeb\001\002\000\022\004\037\005\043\024\034\025" +
    "\036\026\041\027\033\032\042\047\040\001\002\000\022" +
    "\033\120\034\051\041\047\042\045\043\050\044\052\045" +
    "\053\046\054\001\002\000\014\004\024\017\030\021\027" +
    "\022\031\030\025\001\002\000\022\004\uffea\014\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\030\uffea\031\uffea\001\002" +
    "\000\004\031\123\001\002\000\006\002\uffff\006\uffff\001" +
    "\002\000\020\004\024\014\uffed\017\030\021\027\022\031" +
    "\030\025\031\uffed\001\002\000\004\031\126\001\002\000" +
    "\022\004\uffec\014\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\030\uffec\031\uffec\001\002\000\006\014\uffee\031\uffee\001" +
    "\002\000\022\004\037\005\043\024\034\025\036\026\041" +
    "\027\033\032\042\047\040\001\002\000\022\004\037\005" +
    "\043\024\034\025\036\026\041\027\033\032\042\047\040" +
    "\001\002\000\022\034\051\036\133\041\047\042\045\043" +
    "\050\044\052\045\053\046\054\001\002\000\022\004\uffe8" +
    "\014\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030\uffe8\031" +
    "\uffe8\001\002\000\022\034\051\035\135\041\047\042\045" +
    "\043\050\044\052\045\053\046\054\001\002\000\004\040" +
    "\136\001\002\000\022\004\037\005\043\024\034\025\036" +
    "\026\041\027\033\032\042\047\040\001\002\000\022\034" +
    "\051\036\140\041\047\042\045\043\050\044\052\045\053" +
    "\046\054\001\002\000\022\004\uffe7\014\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\030\uffe7\031\uffe7\001\002\000\006" +
    "\002\000\006\142\001\002\000\004\004\143\001\002\000" +
    "\004\030\144\001\002\000\014\004\ufffb\007\ufffb\015\ufffb" +
    "\016\ufffb\031\ufffb\001\002\000\014\004\146\007\ufff8\015" +
    "\153\016\152\031\ufff8\001\002\000\004\004\ufff2\001\002" +
    "\000\004\004\205\001\002\000\026\004\ufffc\007\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\030\ufffc" +
    "\031\ufffc\001\002\000\006\007\160\031\156\001\002\000" +
    "\004\004\ufff1\001\002\000\006\004\ufff0\034\154\001\002" +
    "\000\004\035\155\001\002\000\004\004\uffef\001\002\000" +
    "\006\002\ufffe\006\ufffe\001\002\000\006\007\ufff9\031\ufff9" +
    "\001\002\000\010\004\146\015\153\016\152\001\002\000" +
    "\004\004\162\001\002\000\004\032\163\001\002\000\012" +
    "\004\146\015\153\016\152\033\ufff5\001\002\000\004\033" +
    "\174\001\002\000\004\004\166\001\002\000\006\033\ufff3" +
    "\037\167\001\002\000\010\004\146\015\153\016\152\001" +
    "\002\000\004\033\ufff6\001\002\000\004\004\172\001\002" +
    "\000\006\033\ufff3\037\167\001\002\000\004\033\ufff4\001" +
    "\002\000\004\030\175\001\002\000\022\004\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\030\ufffb\001" +
    "\002\000\022\004\200\014\uffed\015\153\016\152\017\030" +
    "\021\027\022\031\030\025\001\002\000\004\014\201\001" +
    "\002\000\010\004\ufff2\034\130\040\131\001\002\000\022" +
    "\004\037\005\043\024\034\025\036\026\041\027\033\032" +
    "\042\047\040\001\002\000\022\034\051\036\203\041\047" +
    "\042\045\043\050\044\052\045\053\046\054\001\002\000" +
    "\004\031\204\001\002\000\006\007\ufff7\031\ufff7\001\002" +
    "\000\004\036\206\001\002\000\026\004\ufffa\007\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\030\ufffa" +
    "\031\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\004\005\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\025\001\001" +
    "\000\002\001\001\000\006\015\123\016\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\075\001\001\000\002\001\001\000" +
    "\004\017\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\074\001\001\000\002\001\001\000\004\017" +
    "\073\001\001\000\004\017\072\001\001\000\004\017\070" +
    "\001\001\000\004\017\067\001\001\000\004\017\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\057\020\060\001\001\000\004\021\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\064\001\001\000\004\021\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\110\001" +
    "\001\000\002\001\001\000\004\015\112\001\001\000\002" +
    "\001\001\000\004\015\114\001\001\000\002\001\001\000" +
    "\004\017\116\001\001\000\002\001\001\000\004\015\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\123\016\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\133\001" +
    "\001\000\004\017\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\144\001\001\000\010\006\147\011\150\014\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\163\014\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\167\001\001" +
    "\000\004\014\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\175\001\001\000\012\006\147\014" +
    "\146\015\123\016\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  errormsg.ErrorMsg errorMsg;

  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

  public Grm(java_cup.runtime.Scanner scan, errormsg.ErrorMsg err) {
    this(scan);
    errorMsg = err;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpRest ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ExpRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpRest ::= COMMA Exp ExpRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ExpRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpList ::= Exp ExpRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= LPAREN Exp RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= EXCLAMATION Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= NEW ID LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= NEW INT LBRACK Exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= THIS 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= FALSE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= TRUE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= INTEGER_LITERAL 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp DOT ID LPAREN ExpList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp DOT LENGTH 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp LBRACK Exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp LT Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp AND Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp TIMES Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp MINUS Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp PLUS Exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID LBRACK Exp RBRACK ASSIGN Exp SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ID ASSIGN Exp SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= PRINTLN LPAREN Exp RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= WHILE LPAREN Exp RPAREN Statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= IF LPAREN Exp RPAREN Statement ELSE Statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement StatementList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT LBRACK RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalRest ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*FormalRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalRest ::= COMMA Type ID FormalRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*FormalRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FormalList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*FormalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FormalList ::= Type ID FormalRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*FormalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDecl ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Exp SEMICOLON RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type ID SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDeclList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDecl ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDecl ::= ClassDecl CLASS ID LBRACE VarDeclList MethodDeclList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE Statement RBRACE RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*MainClass*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MainClass ClassDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

