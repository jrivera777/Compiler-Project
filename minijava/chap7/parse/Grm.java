
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Apr 01 13:35:44 EDT 2013
//----------------------------------------------------

package parse;

import syntaxtree.*;

/** CUP v0.10k generated parser.
  * @version Mon Apr 01 13:35:44 EDT 2013
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\004\000\002\004" +
    "\023\000\002\006\004\000\002\006\002\000\002\005\010" +
    "\000\002\010\004\000\002\010\002\000\002\007\005\000" +
    "\002\012\004\000\002\012\002\000\002\011\017\000\002" +
    "\013\004\000\002\013\006\000\002\013\002\000\002\014" +
    "\004\000\002\014\006\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\017\004\000" +
    "\002\017\002\000\002\020\004\000\002\020\002\000\002" +
    "\016\005\000\002\016\011\000\002\016\007\000\002\016" +
    "\007\000\002\016\006\000\002\016\011\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\006\000\002\021\005\000\002" +
    "\021\010\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\007" +
    "\000\002\021\006\000\002\021\004\000\002\021\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\002\000\002" +
    "\022\003\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\006\006\001\002\000\004\002\212\001" +
    "\002\000\006\002\ufffd\006\ufffd\001\002\000\004\004\007" +
    "\001\002\000\004\016\010\001\002\000\004\007\011\001" +
    "\002\000\004\010\012\001\002\000\004\011\013\001\002" +
    "\000\004\012\014\001\002\000\004\020\015\001\002\000" +
    "\004\013\016\001\002\000\004\022\017\001\002\000\004" +
    "\023\020\001\002\000\004\004\021\001\002\000\004\021" +
    "\022\001\002\000\004\016\023\001\002\000\014\004\024" +
    "\016\026\030\030\031\027\032\031\001\002\000\006\022" +
    "\130\033\131\001\002\000\004\017\126\001\002\000\016" +
    "\004\024\016\026\017\uffeb\030\030\031\027\032\031\001" +
    "\002\000\004\020\115\001\002\000\004\020\107\001\002" +
    "\000\004\020\032\001\002\000\022\004\037\005\043\020" +
    "\041\035\034\036\036\037\040\040\033\047\042\001\002" +
    "\000\006\004\100\026\101\001\002\000\030\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\001\002\000\022\021\076\022" +
    "\046\041\047\042\045\043\050\044\051\045\052\046\053" +
    "\001\002\000\030\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\001\002\000\030\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\001\002\000\030\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\001\002\000\022\004\037\005\043\020\041\035\034\036" +
    "\036\037\040\040\033\047\042\001\002\000\022\004\037" +
    "\005\043\020\041\035\034\036\036\037\040\040\033\047" +
    "\042\001\002\000\030\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\001\002\000\030\021\uffd3\022\046\023\uffd3\024\uffd3" +
    "\025\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\053\001\002\000\022\004\037\005\043\020\041\035\034" +
    "\036\036\037\040\040\033\047\042\001\002\000\022\004" +
    "\037\005\043\020\041\035\034\036\036\037\040\040\033" +
    "\047\042\001\002\000\022\004\037\005\043\020\041\035" +
    "\034\036\036\037\040\040\033\047\042\001\002\000\022" +
    "\004\037\005\043\020\041\035\034\036\036\037\040\040" +
    "\033\047\042\001\002\000\022\004\037\005\043\020\041" +
    "\035\034\036\036\037\040\040\033\047\042\001\002\000" +
    "\022\004\037\005\043\020\041\035\034\036\036\037\040" +
    "\040\033\047\042\001\002\000\006\004\054\034\055\001" +
    "\002\000\004\020\056\001\002\000\030\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\001\002\000\024\004\037\005\043" +
    "\020\041\021\uffcf\035\034\036\036\037\040\040\033\047" +
    "\042\001\002\000\004\025\063\001\002\000\024\021\uffd1" +
    "\022\046\025\uffce\041\047\042\045\043\050\044\051\045" +
    "\052\046\053\001\002\000\004\021\062\001\002\000\030" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\022" +
    "\004\037\005\043\020\041\035\034\036\036\037\040\040" +
    "\033\047\042\001\002\000\024\021\uffd0\022\046\025\uffcd" +
    "\041\047\042\045\043\050\044\051\045\052\046\053\001" +
    "\002\000\030\021\uffe0\022\046\023\uffe0\024\uffe0\025\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\053\001" +
    "\002\000\030\021\uffe1\022\046\023\uffe1\024\uffe1\025\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\052\046\053\001" +
    "\002\000\030\021\uffe2\022\046\023\uffe2\024\uffe2\025\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\052\046\053\001" +
    "\002\000\030\021\uffdf\022\046\023\uffdf\024\uffdf\025\uffdf" +
    "\041\uffdf\042\045\043\050\044\051\045\052\046\053\001" +
    "\002\000\022\022\046\023\072\041\047\042\045\043\050" +
    "\044\051\045\052\046\053\001\002\000\030\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\001\002\000\030\021\uffde\022" +
    "\046\023\uffde\024\uffde\025\uffde\041\uffde\042\uffde\043\050" +
    "\044\051\045\052\046\053\001\002\000\022\021\075\022" +
    "\046\041\047\042\045\043\050\044\051\045\052\046\053" +
    "\001\002\000\030\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\001\002\000\004\024\077\001\002\000\022\004\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\001\002\000\004\020\105\001\002\000\004\022\102\001" +
    "\002\000\022\004\037\005\043\020\041\035\034\036\036" +
    "\037\040\040\033\047\042\001\002\000\022\022\046\023" +
    "\104\041\047\042\045\043\050\044\051\045\052\046\053" +
    "\001\002\000\030\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\001\002\000\004\021\106\001\002\000\030\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\001\002\000\022\004\037\005" +
    "\043\020\041\035\034\036\036\037\040\040\033\047\042" +
    "\001\002\000\022\021\111\022\046\041\047\042\045\043" +
    "\050\044\051\045\052\046\053\001\002\000\014\004\024" +
    "\016\026\030\030\031\027\032\031\001\002\000\004\015" +
    "\113\001\002\000\014\004\024\016\026\030\030\031\027" +
    "\032\031\001\002\000\022\004\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002\000\022" +
    "\004\037\005\043\020\041\035\034\036\036\037\040\040" +
    "\033\047\042\001\002\000\022\021\117\022\046\041\047" +
    "\042\045\043\050\044\051\045\052\046\053\001\002\000" +
    "\014\004\024\016\026\030\030\031\027\032\031\001\002" +
    "\000\022\004\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\001\002\000\020\004\uffe9\014\uffe9" +
    "\016\uffe9\017\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\004\017\123\001\002\000\022\004\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000" +
    "\020\004\024\014\uffec\016\026\017\uffec\030\030\031\027" +
    "\032\031\001\002\000\020\004\uffea\014\uffea\016\uffea\017" +
    "\uffea\030\uffea\031\uffea\032\uffea\001\002\000\004\017\127" +
    "\001\002\000\006\002\uffff\006\uffff\001\002\000\022\004" +
    "\037\005\043\020\041\035\034\036\036\037\040\040\033" +
    "\047\042\001\002\000\022\004\037\005\043\020\041\035" +
    "\034\036\036\037\040\040\033\047\042\001\002\000\022" +
    "\022\046\024\133\041\047\042\045\043\050\044\051\045" +
    "\052\046\053\001\002\000\022\004\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000" +
    "\022\022\046\023\135\041\047\042\045\043\050\044\051" +
    "\045\052\046\053\001\002\000\004\033\136\001\002\000" +
    "\022\004\037\005\043\020\041\035\034\036\036\037\040" +
    "\040\033\047\042\001\002\000\022\022\046\024\140\041" +
    "\047\042\045\043\050\044\051\045\052\046\053\001\002" +
    "\000\022\004\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\001\002\000\006\002\000\006\143" +
    "\001\002\000\006\002\ufffe\006\ufffe\001\002\000\004\004" +
    "\144\001\002\000\004\016\145\001\002\000\014\004\ufffa" +
    "\007\ufffa\017\ufffa\026\ufffa\027\ufffa\001\002\000\014\004" +
    "\147\007\ufff7\017\ufff7\026\154\027\153\001\002\000\004" +
    "\004\ufff0\001\002\000\004\004\210\001\002\000\006\007" +
    "\161\017\157\001\002\000\026\004\ufffb\007\ufffb\014\ufffb" +
    "\016\ufffb\017\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\001\002\000\004\004\uffef\001\002\000\006\004\uffee" +
    "\022\155\001\002\000\004\023\156\001\002\000\004\004" +
    "\uffed\001\002\000\006\002\ufffc\006\ufffc\001\002\000\006" +
    "\007\ufff8\017\ufff8\001\002\000\010\004\147\026\154\027" +
    "\153\001\002\000\004\004\163\001\002\000\004\020\164" +
    "\001\002\000\012\004\147\021\ufff3\026\154\027\153\001" +
    "\002\000\004\004\200\001\002\000\004\021\167\001\002" +
    "\000\004\016\170\001\002\000\022\004\ufffa\014\ufffa\016" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\001\002" +
    "\000\022\004\173\014\uffeb\016\026\026\154\027\153\030" +
    "\030\031\027\032\031\001\002\000\004\014\174\001\002" +
    "\000\010\004\ufff0\022\130\033\131\001\002\000\022\004" +
    "\037\005\043\020\041\035\034\036\036\037\040\040\033" +
    "\047\042\001\002\000\022\022\046\024\176\041\047\042" +
    "\045\043\050\044\051\045\052\046\053\001\002\000\004" +
    "\017\177\001\002\000\006\007\ufff6\017\ufff6\001\002\000" +
    "\006\021\ufff5\025\201\001\002\000\010\004\147\026\154" +
    "\027\153\001\002\000\004\004\207\001\002\000\006\021" +
    "\ufff4\025\204\001\002\000\010\004\147\026\154\027\153" +
    "\001\002\000\004\004\206\001\002\000\006\021\ufff1\025" +
    "\ufff1\001\002\000\006\021\ufff2\025\ufff2\001\002\000\004" +
    "\024\211\001\002\000\026\004\ufff9\007\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\004\006\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\120\017" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\073\001\001\000" +
    "\004\021\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\072\001\001\000\004\021\070\001\001\000" +
    "\004\021\067\001\001\000\004\021\066\001\001\000\004" +
    "\021\065\001\001\000\004\021\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\057" +
    "\022\056\023\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\107\001\001\000\002\001\001\000" +
    "\004\016\111\001\001\000\002\001\001\000\004\016\113" +
    "\001\001\000\002\001\001\000\004\021\115\001\001\000" +
    "\002\001\001\000\004\016\117\001\001\000\002\001\001" +
    "\000\004\020\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\133\001\001\000" +
    "\004\021\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\145\001\001\000\010\007\151\012\150" +
    "\015\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\165\015" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\170\001\001\000\012\007\151\015" +
    "\147\016\120\017\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\202\015\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  errormsg.ErrorMsg errorMsg;

  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

  public Grm(java_cup.runtime.Scanner scan, errormsg.ErrorMsg err) {
    this(scan);
    errorMsg = err;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {



  // An abbreviation for creating identifiers.
  static Identifier id(String s) {
    return new Identifier(s);
  }


  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpRest ::= ExpRest COMMA Exp 
            {
              syntaxtree.ExpList RESULT = null;
		int eRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.ExpList eR = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 eR.addElement(e1); RESULT = eR;
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*ExpRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpRest ::= Exp 
            {
              syntaxtree.ExpList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
			ExpList lst = new ExpList();
			lst.addElement(e1);
			RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*ExpRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpList ::= 
            {
              syntaxtree.ExpList RESULT = null;
		 RESULT = new ExpList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpList ::= ExpRest COMMA Exp 
            {
              syntaxtree.ExpList RESULT = null;
		int eRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.ExpList eR = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 eR.addElement(e1); RESULT = eR; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpList ::= Exp 
            {
              syntaxtree.ExpList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		       ExpList lst = new ExpList();
		       lst.addElement(e1);
		       RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= LPAREN Exp RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= EXCLAMATION Exp 
            {
              syntaxtree.Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Not(xleft, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= NEW ID LPAREN RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new NewObject(nleft, id(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= NEW INT LBRACK Exp RBRACK 
            {
              syntaxtree.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new NewArray(nleft, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= THIS 
            {
              syntaxtree.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new This(tleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= ID 
            {
              syntaxtree.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdentifierExp(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= FALSE 
            {
              syntaxtree.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new False(fleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= TRUE 
            {
              syntaxtree.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new True(tleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= INTEGER_LITERAL 
            {
              syntaxtree.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IntegerLiteral(ileft, i.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp DOT ID LPAREN ExpList RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.ExpList eL = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Call(dleft, e1, id(i), eL); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp DOT LENGTH 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new ArrayLength(e1left, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp LBRACK Exp RBRACK 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ArrayLookup(lbleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp LT Exp 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new LessThan(ltleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp AND Exp 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new And(aleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp TIMES Exp 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Times(tleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp MINUS Exp 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Minus(mleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp PLUS Exp 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Plus(pleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= ID LBRACK Exp RBRACK ASSIGN Exp SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ArrayAssign(aleft, id(i), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= ID ASSIGN Exp SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Assign(aleft, id(i), e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= PRINTLN LPAREN Exp RPAREN SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Print(pleft, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= WHILE LPAREN Exp RPAREN Statement 
            {
              syntaxtree.Statement RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement s = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new While(wleft, e1, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IF LPAREN Exp RPAREN Statement ELSE Statement 
            {
              syntaxtree.Statement RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Statement s1 = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement s2 = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new If(ileft, e1, s1, s2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= LBRACE StatementList RBRACE 
            {
              syntaxtree.Statement RESULT = null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.StatementList sL = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Block(sLleft, sL); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StatementRest ::= 
            {
              syntaxtree.StatementList RESULT = null;
		 RESULT = new StatementList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*StatementRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementRest ::= StatementRest Statement 
            {
              syntaxtree.StatementList RESULT = null;
		int sRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.StatementList sR = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement s = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 sR.addElement(s); RESULT = sR; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*StatementRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= 
            {
              syntaxtree.StatementList RESULT = null;
		 RESULT = new StatementList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= Statement StatementRest 
            {
              syntaxtree.StatementList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Statement s = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.StatementList sR = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		       StatementList lst = new StatementList();
		       lst.addElement(s);
		       for(int i = 0; i < sR.size(); i++){
		          lst.addElement(sR.elementAt(i));
		       }
		       RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= INT LBRACK RBRACK 
            {
              syntaxtree.Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new IntArrayType(ileft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= INT 
            {
              syntaxtree.Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IntegerType(ileft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOLEAN 
            {
              syntaxtree.Type RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new BooleanType(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= ID 
            {
              syntaxtree.Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdentifierType(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*Type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalRest ::= FormalRest COMMA Type ID 
            {
              syntaxtree.FormalList RESULT = null;
		int fRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		syntaxtree.FormalList fR = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		       fR.addElement(new Formal(ileft, t, id(i)));
		       RESULT = fR;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*FormalRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalRest ::= Type ID 
            {
              syntaxtree.FormalList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		       FormalList lst = new FormalList();
		       lst.addElement(new Formal(ileft, t, id(i)));
		       RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*FormalRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalList ::= 
            {
              syntaxtree.FormalList RESULT = null;
		 RESULT = new FormalList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*FormalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalList ::= Type ID COMMA FormalRest 
            {
              syntaxtree.FormalList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fRleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fRright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.FormalList fR = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
			FormalList lst = new FormalList();
			lst.addElement(new Formal(ileft, t, id(i)));
			for(int j = 0; j < fR.size(); j++)
			   lst.addElement(fR.elementAt(j));
			RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*FormalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FormalList ::= Type ID 
            {
              syntaxtree.FormalList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
		       FormalList lst =  new FormalList();
		       lst.addElement(new Formal(ileft, t, id(i)));
		       RESULT = lst;
		    
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*FormalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDecl ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Exp SEMICOLON RBRACE 
            {
              syntaxtree.MethodDecl RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-11)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-10)).value;
		int fLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		syntaxtree.FormalList fL = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		syntaxtree.VarDeclList vL = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int sLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.StatementList sL = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new MethodDecl(pleft, t, id(i), fL, vL, sL, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclList ::= 
            {
              syntaxtree.MethodDeclList RESULT = null;
		 RESULT = new MethodDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              syntaxtree.MethodDeclList RESULT = null;
		int mLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MethodDeclList mL = (syntaxtree.MethodDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int mDleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int mDright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.MethodDecl mD = (syntaxtree.MethodDecl)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 mL.addElement(mD); RESULT = mL; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= Type ID SEMICOLON 
            {
              syntaxtree.VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new VarDecl(ileft, t, id(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDeclList ::= 
            {
              syntaxtree.VarDeclList RESULT = null;
		 RESULT = new VarDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDeclList ::= VarDeclList VarDecl 
            {
              syntaxtree.VarDeclList RESULT = null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.VarDeclList vL = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.VarDecl v = (syntaxtree.VarDecl)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 vL.addElement(v); RESULT = vL; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= CLASS ID LBRACE VarDeclList MethodDeclList RBRACE 
            {
              syntaxtree.ClassDecl RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.VarDeclList vL = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MethodDeclList mL = (syntaxtree.MethodDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ClassDeclSimple(cleft,id(i), vL, mL); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclList ::= 
            {
              syntaxtree.ClassDeclList RESULT = null;
		 RESULT = new ClassDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*ClassDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclList ::= ClassDeclList ClassDecl 
            {
              syntaxtree.ClassDeclList RESULT = null;
		int cLleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cLright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.ClassDeclList cL = (syntaxtree.ClassDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.ClassDecl c = (syntaxtree.ClassDecl)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 cL.addElement(c); RESULT = cL; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*ClassDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE Statement RBRACE RBRACE 
            {
              syntaxtree.MainClass RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-16)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-15)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-15)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-15)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Statement s = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new MainClass(cleft, id(i1), id(i2), s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*MainClass*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MainClass ClassDeclList 
            {
              syntaxtree.Program RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MainClass m = (syntaxtree.MainClass)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.ClassDeclList c1 = (syntaxtree.ClassDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Program(mleft, m, c1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Program start_val = (syntaxtree.Program)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

